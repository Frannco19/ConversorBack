// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ConversorContext))]
    partial class ConversorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Data.Entities.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyLegend")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("CurrenciesConvert");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            ConversionRate = 0.002m,
                            CurrencyCode = "ARS",
                            CurrencyLegend = "Peso Argentino",
                            CurrencySymbol = "$"
                        },
                        new
                        {
                            CurrencyId = 2,
                            ConversionRate = 1.09m,
                            CurrencyCode = "EUR",
                            CurrencyLegend = "Euro",
                            CurrencySymbol = "€"
                        },
                        new
                        {
                            CurrencyId = 3,
                            ConversionRate = 0.043m,
                            CurrencyCode = "KC",
                            CurrencyLegend = "Corona Checa",
                            CurrencySymbol = "Kč"
                        },
                        new
                        {
                            CurrencyId = 4,
                            ConversionRate = 1.0m,
                            CurrencyCode = "USD",
                            CurrencyLegend = "Dólar Americano",
                            CurrencySymbol = "$"
                        });
                });

            modelBuilder.Entity("Data.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ConversionLimit")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            SubscriptionId = 1,
                            ConversionLimit = 10m,
                            SubscriptionName = "Free"
                        },
                        new
                        {
                            SubscriptionId = 2,
                            ConversionLimit = 100m,
                            SubscriptionName = "Trial"
                        },
                        new
                        {
                            SubscriptionId = 3,
                            ConversionLimit = 0m,
                            SubscriptionName = "Pro"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConversionsMaked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.Entities.Currency", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
